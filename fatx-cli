#!/usr/bin/env bash
set -euo pipefail
#IFS=$'\n\t'

# fatx-cli is a Bash script wrapper for fatx (fatxfs), a userspace FATX
# filesystem driver (https://github.com/mborgerson/fatx).
#
# fatx-cli written primarily because fatx doesn't automagically mount F and G
# partitions (https://github.com/mborgerson/fatx/issues/30) yet.
#
# This script uses alot of bashism. Please use latest version of Bash.
#
# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

print() { printf ':: %s\n' "$@" ;}
# Green text.
print_g() { printf '\e[32m:: %s\n\e[m' "$@" ;}
# Brown text.
print_w() { printf '\e[33m:: %s\n\e[m' "$@" ;}

# Checking dependencies:
declare -a DEPS=( fatxfs lsblk od )
for (( NUM=${#DEPS[@]}, i=0; i<NUM; i++ )); do
  if command -v "${DEPS[i]}" &>/dev/null ; then
    unset -v 'DEPS[i]'
  fi
done
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  print_w 'Package(s) not found'
  print_w 'Install the proper distribution package for your system:'
  printf  '   - %s\n' "${DEPS[@]}"
  exit 1
fi

# VARIABLES --------------------------------------------------------------------

PARTINFO='/tmp/ogxptbl'
# Default partitions offset.
# PARTITION  OFFSET (hex)   SIZE (hex)       SIZE (dec)  SIZE (MB)
# 1. E       0xabe80000     0x1312d6000      5120024576       4882
# 2. C       0x8ca80000     0x1f400000        524288000        500
# 3. X       0x80000        0x2ee00000        786432000        750
# 4. Y       0x2ee80000     0x2ee00000        786432000        750
# 5. Z       0x5dc80000     0x2ee00000        786432000        750

declare -A XPART=( [0]="E" [1]="C" [2]="X" [3]="Y" [4]="Z" [5]="F" [6]="G" [e]="0" [c]="1" [x]="2" [y]="3" [z]="4" [f]="5" [g]="6" )

# FUNCTIONS --------------------------------------------------------------------

# Automatically switch to root if failed as regular user.
as_sudo() {
  if [[ $(stat -c '%U' "$DISK") == "$USER" ]]; then
    "$@"
  else
    sudo "$@"
  fi
}

check_disk() {
  if [[ -z ${DISK:-} ]]; then
    print_w "No disk to $TASK"
    print "Example: ${0##*/} $TASK -i /dev/sda"
    exit
  fi
}

dump_part_info() {
  local MNTQCOW=''
  local MODEL=''
  DISK="$1"

  if [[ ${DISK##*.} == 'qcow2' ]]; then
    # Unmount mounted the disk partition, because:
    # 1. dd: error reading '/dev/nbd0'
    # 2. I don't know how to mount multi partition of a same qcow (nbd).
    while read -r _ mnt _; do
      if [[ $mnt =~ ${DISK##*/} ]]; then
        MNTQCOW="${mnt//\\040/ }"
      fi
    done < /etc/mtab
    if [[ $TASK != 'list' ]] && [[ -n $MNTQCOW ]]; then
      print_w "Found a mounted partition of $DISK"
      read -rp ':: Unmount (y/N)? ' answer
      [[ ${answer,,} != 'y' ]] && exit
      sudo umount -l "$MNTQCOW"
    fi

    if [[ $DISK != '/dev/nbd0' ]]; then
      sudo modprobe nbd max_part=8 &>/dev/null
      sudo qemu-nbd --disconnect /dev/nbd0 &>/dev/null
      sudo qemu-nbd --connect=/dev/nbd0 "$DISK"
      DISK='/dev/nbd0'
    fi
  fi

  if lsblk -dno MODEL "$DISK" &>/dev/null; then
    MODEL="$(lsblk -dno MODEL "$DISK")"
  fi

  if [[ -z ${MODEL:-} ]]; then
    MODEL="${DISK##*/}"
  fi

  PARTINFO="${PARTINFO}-${MODEL// /_}"
  as_sudo dd if="$DISK" of="$PARTINFO" bs=512 count=1 status=none

  SECTOR=()
  while read -r _ active start size _; do
    # Get active partitions.
    if [[ $active == '80000000' ]]; then
      # MUltiply by 512.
      SECTOR+=("$((0x${start}*0x200)) $((0x${size}*0x200))")
    fi
  done < <(od -t x4 "$PARTINFO")
}

mount_partition() {
  dump_part_info "$1"

  if [[ ${#SECTOR[@]} -eq 0 ]]; then
    print_w "$1 doesn't have partition table"
    print "> Trying retail (plus F) offset and size"
    SECTOR=(
      '0xabe80000 0x1312d6000'
      '0x8ca80000 0x1f400000'
      '0x80000 0x2ee00000'
      '0x2ee80000 0x2ee00000'
      '0x5dc80000 0x2ee00000'
    )
  fi

  if [[ $3 -ge ${#SECTOR[@]} ]]; then
    print_w "$1 does not have ${XPART[$3]} partition"
    exit
  fi

  as_sudo fatxfs -o allow_other "$DISK" "$2" --offset="$(printf '0x%x' "${SECTOR[$3]% *}")" --size="$(printf '0x%x' "${SECTOR[$3]##* }")"

  nemo --tabs --existing-window "$MNT"
}

print_usage() {
  printf '%s\n' "
  ${0##*/} is a wrapper script for fatxfs, a userspace FATX filesystem driver.

  Usage: ${0##*/} TASK OPTIONS

  TASK:
    lsblk   List unmounted block device (connected disks).
    dump    Dump partition info of the Xbox disk (sector 0).
    list    List Xbox disk's partitions.
    mount   Mount Xbox disk's partition.

  OPTIONS:
    -d      Partitions's drive letter.
    -h      Print this text and exit.
    -i      Device to mount.
    -o      Mountpoint.
    -v      Script's version.

  Example:
    - List connected but unmounted block devices.
      ${0##*/} lsblk

    - Dump partition info of /dev/sdc.
      ${0##*/} dump -i /dev/sdc

    - List partitions of /dev/sda.
      ${0##*/} list -i /dev/sda

    - Mount F partition of /dev/sdc to ${HOME}/ogxhdd.
      ${0##*/} mount -o /dev/sdc -o ${HOME}/ogxhdd -d F
"
  exit
}
# MAIN -------------------------------------------------------------------------

# If this script run without argument.
[[ ${#@} -eq 0 ]] && print_usage

TASK="$1"

shift 1
while getopts ":d:hi:o:v" opt; do
  case $opt in
    d)
      DRV="${OPTARG,,}"
    ;;
    h)
      print_usage
    ;;
    i)
      DISK="$OPTARG"
    ;;
    o)
      MNT="$OPTARG"
    ;;
    v)
      echo ':: fatx-cli v0.4 (2024.01.06) - written by si_kabayan'
      exit
    ;;
    \?)
      print_w "Wrong option: -$OPTARG" >&2
      exit 1
    ;;
    :)
      print_w "Option -$OPTARG need an argument" >&2
      exit 1
    ;;
  esac
done

case "$TASK" in
  lsblk)
    lsblk -Ado PATH,SIZE,MODEL
  ;;
  dump)
    check_disk
    dump_part_info "$DISK"
    print_g "$DISK partition info has been dumped to ${PARTINFO}"
  ;;
  list)
    check_disk
    dump_part_info "$DISK" #&>/dev/null

    if [[ ${#SECTOR[@]} -eq 0 ]]; then
      print_w "$DISK doesn't have partition table"
      exit
    fi

    # Print table header.
    printf  "\e[01;32m %-10s %-14s %-14s %12s %10s\n\e[m" \
            PARTITION \
            'OFFSET (hex)' \
            'SIZE (hex)' \
            'SIZE (dec)' \
            'SIZE (MB)'

    # Print table content.
    for (( NUM=${#SECTOR[@]}, i=0; i<NUM; i++ )); do
      PEND="${SECTOR[i]##* }"
      printf  " %-10s 0x%-12s 0x%-12x %12d %10d\n" \
              "$((i+1)). ${XPART[$i]}" \
              "$(printf '%x' "$((${SECTOR[i]% *}))")" \
              "$((PEND))" \
              "$((PEND))" \
              "$(((PEND) / 0x100000))"
    done
  ;;
  mount)
    check_disk

    DRV="${DRV:-c}"

    case "$DRV" in
      c|e|f|g|x|y|z)
        if [[ -z ${MNT:-} ]]; then
          if lsblk -dno MODEL "$DISK" &>/dev/null; then
            MNT="$(lsblk -dno MODEL "$DISK")"
            MNT="${HOME}/XBMount/${MNT// /-} - ${DRV^^}"
          else
            MNT="${HOME}/XBMount/${DISK##*/} - ${DRV^^}"
          fi
          mkdir -p "$MNT"
        fi

        if [[ ! -d $MNT ]]; then
          print_w "${MNT}: mount point does not exist."
          exit
        fi

        mount_partition "$DISK" "$MNT" "${XPART[$DRV]}"
      ;;
      *)
        print_w 'Mount option only accept C, E, F, G, X, Y and Z drive'
        exit
      ;;
    esac
  ;;
  *)
    print_usage
  ;;
esac